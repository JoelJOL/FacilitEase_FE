import { Component, Inject } from '@angular/core';
import { Subject, filter, takeUntil } from 'rxjs';
import {
  MSAL_GUARD_CONFIG,
  MsalBroadcastService,
  MsalGuardConfiguration,
  MsalRedirectComponent,
  MsalService,
} from '@azure/msal-angular';
import {
  AuthenticationResult,
  InteractionStatus,
  PopupRequest,
  RedirectRequest,
} from '@azure/msal-browser';
import { AzureService } from '../azureService/azure.service';
import { environment } from 'environments/environment';
import { azureObj } from '../authModels/model';
import { AzureReturn } from '../authModels/model';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login-screen',
  templateUrl: './login-screen.component.html',
  styleUrls: ['./login-screen.component.css'],
})
export class LoginScreenComponent {
  isUserLoggedIn: boolean = false;
  private readonly _destroy = new Subject<void>();
  //MSAL_GUARD_CONFIG token, which is typically a configuration object for the MSAL (Microsoft Authentication Library) guard.
  //It allows the component or service to access configuration settings related to authentication guard behavior.
  //MsalBroadcastService is used to broadcast authentication events of the application
  constructor(
    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,
    private msalBroadCastService: MsalBroadcastService,
    private authService: MsalService,
    private azureService: AzureService,
    private router: Router
  ) {}

  //An object to store details of user from the microsoft return after login
  azureObj: azureObj = {
    idToken: '',
    accessToken: '',
    localAccountId: '',
    expiration: 0,
    name: '',
    username: '',
  };
  //To recieve the jwt token generated by the applicaiton server
  azureReturn: AzureReturn = {
    token: '',
  };

  ngOnInit(): void {
    //Checking if there is currently an ongoing login
    this.msalBroadCastService.inProgress$
      .pipe(
        filter(
          (interactionStatus: InteractionStatus) =>
            interactionStatus == InteractionStatus.None
        ),
        takeUntil(this._destroy)
      )
      .subscribe((x) => {
        //It is true if the user id logged in and false if the user is logged out
        this.isUserLoggedIn =
          this.authService.instance.getAllAccounts().length > 0;

        const account = this.authService.instance.getAllAccounts();

        //Adding the data to an object that will be send to the server for login
        this.azureObj.localAccountId = account[0].localAccountId ?? '';
        this.azureObj.expiration = account[0].idTokenClaims?.exp ?? 0;
        this.azureObj.name = account[0].name ?? '';
        this.azureObj.username = account[0].username;

        this.azureService.azureObj = this.azureObj;

        this.azureService.isUserLoggedIn.next(this.isUserLoggedIn);
      });
  }
  Login() {
    //If there is already a token in the session storage, it is removed
    //The user is redirected to the Microsoft Identity platfrom to signin
    sessionStorage.removeItem('FacilitEaseJwt');
    if (this.msalGuardConfig.authRequest) {
      this.authService
        .loginPopup({
          ...this.msalGuardConfig.authRequest,
        } as RedirectRequest)
        .subscribe((authenticationResult) => {
          //The return type of loginPopup is AuthenticaitonResult that consists access token, id token and all other details of login
          const accessToken = authenticationResult.accessToken;
          this.azureObj.accessToken = accessToken;
          this.azureObj.idToken = authenticationResult.idToken;
          this.azureService.isLogged = true;
          //Storing the azure token in session storage
          sessionStorage.setItem('AzureJwt', authenticationResult.idToken);
          if (!sessionStorage.getItem('FacilitEaseJwt')) {
            this.azureService.AzureData(this.azureObj).subscribe((response) => {
              //To decode the token to navigate the user after login
              this.azureService.ResolveToken(response);
              console.log(response);
              //Storing the jwt token generated by the application server in the session storsge
              sessionStorage.setItem('FacilitEaseJwt', response.token);
            });
          }
        });
    }
    //This condition is executed when there is no specific authentication request configuration is provided
    //The configuration above is of authService which is configured from MsalService
    else {
      this.authService.loginPopup().subscribe((response) => {
        const accessToken = response.accessToken;
        this.azureObj.accessToken = accessToken;
      });
    }
  }

  Logout() {
    //The logout action that redirects the user to the microsoft logout page
    //After laogging out the user is redirected to the url provided in the environment.postLogoutUrl
    this.authService.logoutRedirect({
      postLogoutRedirectUri: environment.postLogoutUrl,
    });
    this.isUserLoggedIn = false;
  }

  ngOnDestroy(): void {
    this._destroy.next(undefined);
    this._destroy.complete();
  }
}
