import { HttpClient, HttpHeaders } from '@angular/common/http';
import { HostListener, Injectable } from '@angular/core';
import { MsalService } from '@azure/msal-angular';
import { Observable, Subject } from 'rxjs';
import { azureObj } from '../authModels/model';
import { Profile } from '../authModels/model';
import { AzureReturn } from '../authModels/model';
import { AuthenticationResult } from '@azure/msal-browser';
import { jwtDecode } from 'jwt-decode';
import { Router } from '@angular/router';
import {
  ApprovalPendingTickets,
  AssignedTickets,
  DepartmentHead,
  Employee,
  Manager,
  Tickets,
  UnassignedTickets,
  environment,
  l1Admin,
  l2Admin,
  l3Admin,
} from 'environments/environment';

const GRAPH_ENDPOINT = 'https://graph.microsoft.com/v1.0/me';

@Injectable({
  providedIn: 'root',
})
export class AzureService {
  isUserLoggedIn: Subject<boolean> = new Subject<boolean>();
  isLogged: boolean = false;
  isL1Admin: boolean = false;
  isL2Admin: boolean = false;
  isL3Admin: boolean = false;
  isManager: boolean = false;
  isDepartmentHead: boolean = false;
  isEmployee: boolean = false;
  data: any;
  userValid: boolean = false;
  azureObj: azureObj = {
    idToken: '',
    accessToken: '',
    localAccountId: '',
    expiration: 0,
    name: '',
    username: '',
  };
  employeeIn: boolean = false;
  userId: number = 0;
  userName: string = '';
  userEmail: string = '';
  userRoles: string[] = [];
  azureRoles: string[] = [];
  navigateFirst: boolean = true;
  constructor(
    private http: HttpClient,
    private authService: MsalService,
    private router: Router
  ) {}
  ResolveToken(response: AzureReturn) {
    const token = response.token;
    //Checking if the azure token is already present in the session storage
    const azureToken = sessionStorage.getItem('AzureJwt');
    if (azureToken != null) {
      const decodedToken: any = jwtDecode(azureToken);
      this.azureRoles = decodedToken['roles'];
      console.log(this.azureRoles);
      if (!this.azureRoles.includes('Employee')) {
        this.azureRoles.push('Employee');
      }
    }
    try {
      //Decoding the userId, Email, user roles and user name from the token generated by the applicaiton
      const decodedToken: any = jwtDecode(token);
      this.isLogged = true;
      this.userId =
        decodedToken[
          'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'
        ];
      console.log(this.userId);
      this.userEmail =
        decodedToken[
          'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'
        ];
      this.userRoles =
        decodedToken[
          'http://schemas.microsoft.com/ws/2008/06/identity/claims/role'
        ];
      this.userName = decodedToken['EmployeeName'];

      //For setting the resolve functionality for each routes in app-routing-module to manage the user access to each routes based on their roles
      this.isL1Admin = this.azureRoles.includes('L1Admin');
      this.isL2Admin = this.azureRoles.includes('L2Admin');
      this.isL3Admin = this.azureRoles.includes('L3Admin');
      this.isDepartmentHead = this.azureRoles.includes('DepartmentHead');
      this.isManager = this.azureRoles.includes('Manager');
      this.isEmployee = this.azureRoles.includes('Employee');
      this.isEmployee = true;

      //To let the user navigate to another route automatcally right after the login based on the roles
      if (this.navigateFirst) {
        if (this.isL1Admin) {
          this.router.navigate([`/${l1Admin}`]);
        } else if (this.isL2Admin) {
          this.router.navigate([`/${l2Admin}/${UnassignedTickets}`]);
        } else if (this.isL3Admin) {
          this.router.navigate([`${l3Admin}/${AssignedTickets}`]);
        } else if (this.isDepartmentHead) {
          this.router.navigate([`/${DepartmentHead}`]);
        } else if (this.isManager) {
          this.router.navigate([`/${Manager}/${ApprovalPendingTickets}`]);
        } else if (this.isEmployee) {
          this.router.navigate([`/${Employee}/${Tickets}`]);
        } else {
          console.error('No valid role found for navigation.');
        }
        this.navigateFirst = false;
      }

      this.userValid = true;
    } catch (error) {
      this.Logout();
      console.error('Error decoding JWT token:', error);
    }
    console.log(this.userRoles);
  }
  //Sending data for login to the server and check of the user is present and generate e jwt token of the application
  AzureData(azureObj: azureObj): Observable<AzureReturn> {
    const headers = new HttpHeaders({
      Authorization: `Bearer ${azureObj.idToken}`,
    });
    console.log('post');
    return this.http.post<AzureReturn>(
      'https://localhost:7049/api/User',
      {
        idToken: azureObj.idToken,
        AccessToken: azureObj.accessToken,
        localAccountId: azureObj.localAccountId,
        expiration: azureObj.expiration,
        name: azureObj.name,
        username: azureObj.username,
      },
      { headers }
    );
  }
  //The logout action that redirects the user to the microsoft logout page
  //After laogging out the user is redirected to the url provided in the environment.postLogoutUrl
  Logout() {
    console.log('logout');
    this.isLogged = false;
    this.authService.logoutRedirect({
      postLogoutRedirectUri: environment.postLogoutUrl,
    });
    sessionStorage.clear();
  }
}
