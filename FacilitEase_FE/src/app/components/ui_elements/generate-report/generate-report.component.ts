import { Component, ElementRef, ViewChild } from '@angular/core';
import { AzureService } from '@app/features/Authentication/azureService/azure.service';
import { ReportDataService } from '@app/features/service/dataService/ReportDataService/report-data.service';
import { ReportService } from '@app/features/service/httpService/reportService/report.service';
import html2canvas from 'html2canvas';
// @ts-ignore
import * as pdfMake from 'pdfmake/build/pdfmake';
// @ts-ignore
import * as pdfFonts from 'pdfmake/build/vfs_fonts';
pdfMake.vfs = pdfFonts.pdfMake.vfs;
@Component({
  selector: 'app-generate-report',
  templateUrl: './generate-report.component.html',
  styleUrls: ['./generate-report.component.css'],
})
export class GenerateReportComponent {
  constructor(
    private reportService: ReportService,
    private reportDataService: ReportDataService,
    private azureService: AzureService
  ) {}

  DownloadPDF() {
    const barChartElement = this.reportService.barChartCanvas;
    const doughnutChartElement = this.reportService.doughnutChartCanvas;
    const resolvedLegend = this.reportDataService.resolvedLegend;
    const escalatedLegend = this.reportDataService.escalatedLegend;

    Promise.all([
      html2canvas(barChartElement),
      html2canvas(doughnutChartElement),
      html2canvas(resolvedLegend),
      html2canvas(escalatedLegend),
    ]).then(
      ([
        barCanvas,
        doughnutCanvas,
        resolvedLegendCanvas,
        escalatedLegendCanvas,
      ]) => {
        const barImageData = barCanvas.toDataURL('image/png');
        const doughnutImageData = doughnutCanvas.toDataURL('image/png');
        const resolvedLegendData = resolvedLegendCanvas.toDataURL('image/png');
        const escalatedLegendData =
          escalatedLegendCanvas.toDataURL('image/png');

        const barImage = { image: barImageData, width: 500 }; // Adjust width as needed
        const resolvedLegendImage = { image: resolvedLegendData, width: 150 }; // Adjust width as needed
        const doughnutImage = { image: doughnutImageData, width: 150 }; // Adjust width as needed
        const escalatedLegendImage = { image: escalatedLegendData, width: 150 }; // Adjust width as needed

        const documentDefinition = {
          content: [
            { text: 'Report', style: 'header', alignment: 'center' },
            {
              text: 'Date: ' + new Date().toLocaleDateString(),
              alignment: 'right',
            },
            {
              text: `Generated by: ${this.azureService.userName}`,
              alignment: 'right',
              margin: [0, 0, 0, 20],
            },
            { text: 'Yearly Report', style: 'subheader' },
            barImage,

            { text: 'Weekly Report', style: 'subheader' },

            {
              columns: [
                {
                  width: 'auto',
                  text: [
                    {
                      text: `Total Tickets :${this.reportDataService.weekReport.weeklyTickets}\n`,
                      style: 'paragraph',
                    },
                    {
                      text: `Resolved :${this.reportDataService.weekReport.weeklyResolved}\n`,
                      style: 'paragraph',
                    },
                    {
                      text: `Unresolved :${this.reportDataService.weekReport.weeklyUnresolved}\n`,
                      style: 'paragraph',
                    },
                    {
                      text: `Escalated :${this.reportDataService.weekReport.weeklyEscalated}\n`,
                      style: 'paragraph',
                    },
                  ],
                  alignment: 'left',
                },
                {
                  image: doughnutImageData,
                  width: 150,
                  margin: [70, 0, 0, 0], // Add left margin of 10 units
                },
              ],
              columnGap: 5, // Adjust column gap as needed
            },
            { text: 'Daily Report', style: 'subheader' },
            {
              text: `Total Tickets :${this.reportDataService.weekReport.dailyTickets}`,
              style: 'paragraph',
            },
            {
              text: `Resolved :${this.reportDataService.weekReport.dailyResolved}`,
              style: 'paragraph',
            },
            {
              text: `Unresolved :${this.reportDataService.weekReport.dailyUnresolved}`,
              style: 'paragraph',
            },
            {
              text: `Escalated :${this.reportDataService.weekReport.weeklyEscalated}`,
              style: 'paragraph',
            },
          ],
          styles: {
            header: { fontSize: 18, bold: true, margin: [0, 0, 0, 10] },
            subheader: { fontSize: 16, bold: true, margin: [0, 10, 0, 5] },
          },
        };

        pdfMake.createPdf(documentDefinition).open();
      }
    );
  }
}
