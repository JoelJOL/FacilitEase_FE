{"version":3,"file":"ngx-skeleton-loader.mjs","sources":["../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader-config.types.ts","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.component.ts","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.html","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.module.ts","../../../projects/ngx-skeleton-loader/src/public-api.ts","../../../projects/ngx-skeleton-loader/src/ngx-skeleton-loader.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport type NgxSkeletonLoaderConfigTheme = {\n  // It enforces a combination of `fromRoot` styles with component `styles` attribute\n  extendsFromRoot?: boolean;\n  // This is required since ngStyle is using `any` as well\n  // More details in https://angular.io/api/common/NgStyle\n  [k: string]: any;\n} | null;\n\nexport interface NgxSkeletonLoaderConfig {\n  appearance: 'circle' | 'line' | 'custom-content' | '';\n  animation: 'progress' | 'progress-dark' | 'pulse' | 'false' | false;\n  theme: NgxSkeletonLoaderConfigTheme;\n  loadingText: string;\n  count: number;\n  ariaLabel: string;\n}\n\nexport const NGX_SKELETON_LOADER_CONFIG = new InjectionToken<NgxSkeletonLoaderConfig>('ngx-skeleton-loader.config');\n","import {\n  Component,\n  OnInit,\n  Input,\n  isDevMode,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  NgxSkeletonLoaderConfig,\n  NgxSkeletonLoaderConfigTheme,\n  NGX_SKELETON_LOADER_CONFIG,\n} from './ngx-skeleton-loader-config.types';\n\n@Component({\n  selector: 'ngx-skeleton-loader',\n  templateUrl: './ngx-skeleton-loader.html',\n  styleUrls: ['./ngx-skeleton-loader.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxSkeletonLoaderComponent implements OnInit, OnChanges {\n  static ngAcceptInputType_count: number | string;\n  static ngAcceptInputType_animation: boolean | string;\n\n  @Input()\n  count: NgxSkeletonLoaderConfig['count'];\n\n  @Input()\n  loadingText: NgxSkeletonLoaderConfig['loadingText'];\n\n  @Input()\n  appearance: NgxSkeletonLoaderConfig['appearance'];\n\n  @Input()\n  animation: NgxSkeletonLoaderConfig['animation'];\n\n  @Input()\n  ariaLabel: NgxSkeletonLoaderConfig['ariaLabel'];\n\n  @Input()\n  theme: NgxSkeletonLoaderConfigTheme;\n\n  items: Array<any>;\n\n  constructor(@Inject(NGX_SKELETON_LOADER_CONFIG) @Optional() private config?: NgxSkeletonLoaderConfig) {\n    const {\n      appearance = 'line',\n      animation = 'progress',\n      theme = null,\n      loadingText = 'Loading...',\n      count = 1,\n      ariaLabel = 'loading',\n    } = config || {};\n\n    this.appearance = appearance;\n    this.animation = animation;\n    this.theme = theme;\n    this.loadingText = loadingText;\n    this.count = count;\n    this.items = [];\n    this.ariaLabel = ariaLabel;\n  }\n\n  ngOnInit() {\n    this.validateInputValues();\n  }\n\n  private validateInputValues() {\n    // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n    if (!/^\\d+$/.test(`${this.count}`)) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`,\n        );\n      }\n      this.count = 1;\n    }\n\n    //Force count to 1 when custom-content is used\n    if (this.appearance === 'custom-content') {\n      // Shows error message only in Development\n      if (isDevMode() && this.count !== 1) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` enforces elements with \"custom-content\" appearance as DOM nodes. Forcing \"count\" to \"1\".`,\n        );\n        this.count = 1;\n      }\n    }\n    this.items.length = this.count;\n\n    const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n    if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(\n            ', ',\n          )}. Forcing default to \"progress\".`,\n        );\n      }\n      this.animation = 'progress';\n    }\n\n    if (['circle', 'line', 'custom-content', ''].indexOf(String(this.appearance)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or custom-content or empty string. Forcing default to \"''\".`,\n        );\n      }\n      this.appearance = '';\n    }\n\n    // This code is not using optional chaining since it's only supported on Angular CLI v12\n    //  - more details in this comment https://github.com/angular/angular-cli/issues/20471#issuecomment-815599616\n    // Which raises issues on the consumer's side. E.G: https://github.com/willmendesneto/ngx-skeleton-loader/issues/150#issuecomment-1638612329\n    const { theme } = this.config || {};\n    if (!!theme && !!theme.extendsFromRoot && this.theme !== null) {\n      // Shows error message only in Development\n      this.theme = { ...this.config!.theme, ...this.theme };\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Avoiding multiple calls for the same input in case there's no changes in the fields\n    // Checking if the fields that require validation are available and if they were changed\n    // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n    if (\n      ['count', 'animation', 'appearance'].find(\n        key =>\n          changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue),\n      )\n    ) {\n      return;\n    }\n\n    this.validateInputValues();\n  }\n}\n","@for (item of items; track item) {\n  <div\n    class=\"skeleton-loader\"\n    [attr.aria-label]=\"ariaLabel\"\n    aria-busy=\"true\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    [attr.aria-valuetext]=\"loadingText\"\n    role=\"progressbar\"\n    tabindex=\"-1\"\n    [ngClass]=\"{\n      'custom-content': appearance === 'custom-content',\n      circle: appearance === 'circle',\n      progress: animation === 'progress',\n      'progress-dark': animation === 'progress-dark',\n      pulse: animation === 'pulse'\n    }\"\n    [ngStyle]=\"theme\"\n    >\n    @if (appearance  === 'custom-content') {\n      <ng-content></ng-content>\n    }\n  </div>\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxSkeletonLoaderComponent } from './ngx-skeleton-loader.component';\nimport { NgxSkeletonLoaderConfig, NGX_SKELETON_LOADER_CONFIG } from './ngx-skeleton-loader-config.types';\n\n@NgModule({\n  declarations: [NgxSkeletonLoaderComponent],\n  imports: [CommonModule],\n  exports: [NgxSkeletonLoaderComponent],\n})\nexport class NgxSkeletonLoaderModule {\n  static forRoot(config?: Partial<NgxSkeletonLoaderConfig>): ModuleWithProviders<NgxSkeletonLoaderModule> {\n    return {\n      ngModule: NgxSkeletonLoaderModule,\n      providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }],\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-skeleton-loader\n */\n\nexport * from './lib/ngx-skeleton-loader.component';\nexport * from './lib/ngx-skeleton-loader.module';\nexport * from './lib/ngx-skeleton-loader-config.types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}